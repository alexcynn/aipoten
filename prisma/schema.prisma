// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 사용자 관리
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?  // NextAuth 사용 시 null 가능
  phone     String?  // 전화번호 추가
  role      Role     @default(PARENT)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 관계
  posts     Post[]
  comments  Comment[]
  children  Child[]
  accounts  Account[]
  sessions  Session[]
  therapistProfile TherapistProfile?
  matchingRequests MatchingRequest[]
  consultations    Consultation[]

  @@map("users")
}

// NextAuth.js를 위한 계정 모델
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth.js를 위한 세션 모델
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth.js를 위한 검증 토큰 모델
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// 사용자 역할
enum Role {
  PARENT     // 부모
  THERAPIST  // 치료사
  ADMIN      // 관리자
}

// 아이 정보 (기존 아키텍처에서 가져옴)
model Child {
  id               String    @id @default(cuid())
  userId           String
  name             String
  birthDate        DateTime
  gender           Gender
  gestationalWeeks Int?      // 출산 주수
  birthWeight      Float?    // 출생 시 몸무게
  currentHeight    Float?    // 현재 키
  currentWeight    Float?    // 현재 몸무게
  medicalHistory   String?   // 병력/수술력
  familyHistory    String?   // 가족력
  treatmentHistory String?   // 치료력
  notes            String?   // 특이사항
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // 관계
  user        User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  assessments DevelopmentAssessment[]
  matchingRequests MatchingRequest[]
  consultations    Consultation[]

  @@map("children")
}

enum Gender {
  MALE
  FEMALE
}

// 발달 체크 (기본 구조만 설정)
model DevelopmentAssessment {
  id           String                @id @default(cuid())
  childId      String
  ageInMonths  Int
  status       AssessmentStatus      @default(IN_PROGRESS)
  completedAt  DateTime?
  createdAt    DateTime              @default(now())

  // 관계
  child    Child                   @relation(fields: [childId], references: [id], onDelete: Cascade)
  results  AssessmentResult[]

  @@map("development_assessments")
}

enum AssessmentStatus {
  IN_PROGRESS
  COMPLETED
}

model AssessmentResult {
  id           String                @id @default(cuid())
  assessmentId String
  category     DevelopmentCategory
  score        Float
  level        DevelopmentLevel
  feedback     String?
  recommendations String?
  createdAt    DateTime              @default(now())

  // 관계
  assessment DevelopmentAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@map("assessment_results")
}

enum DevelopmentCategory {
  GROSS_MOTOR   // 대근육
  FINE_MOTOR    // 소근육
  COGNITIVE     // 인지
  LANGUAGE      // 언어
  SOCIAL        // 사회성
  EMOTIONAL     // 정서
}

enum DevelopmentLevel {
  EXCELLENT          // 우수 (80-100점)
  GOOD              // 양호 (60-79점)
  CAUTION           // 주의 (40-59점)
  NEEDS_OBSERVATION // 관찰 필요 (0-39점)
}

// 게시판 시스템
model Board {
  id          String @id
  name        String
  description String?
  order       Int    @default(0)
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  posts Post[]

  @@map("boards")
}

// 게시글
model Post {
  id        String      @id @default(cuid())
  title     String
  content   String
  category  String?     // 게시글 카테고리 (QUESTION, SHARE, REVIEW 등)
  views     Int         @default(0)
  isSticky  Boolean     @default(false) // 공지사항 고정
  isPublished Boolean   @default(true)
  boardId   String
  authorId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // 관계
  board    Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]

  @@map("posts")
}

// 댓글
model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  authorId  String
  parentId  String?  // 대댓글을 위한 부모 댓글 ID
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 관계
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReply", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReply")

  @@map("comments")
}

// 뉴스 시스템
model News {
  id          String    @id @default(cuid())
  title       String
  summary     String
  content     String
  imageUrl    String?
  category    NewsCategory
  tags        String?   // JSON 배열로 저장
  views       Int       @default(0)
  isPublished Boolean   @default(false)
  isFeatured  Boolean   @default(false) // 메인 페이지 노출 여부
  publishedAt DateTime?
  authorId    String?   // 작성자 (관리자)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("news")
}

enum NewsCategory {
  PARENTING_INFO     // 육아정보
  DEVELOPMENT_GUIDE  // 발달가이드
  ANNOUNCEMENT      // 공지사항
  RESEARCH          // 연구소식
  EVENT             // 이벤트
}

// 놀이영상 (기본 구조만 설정)
model Video {
  id             String   @id @default(cuid())
  title          String
  description    String
  videoUrl       String   // 외부 링크
  videoPlatform  VideoPlatform
  thumbnailUrl   String?
  duration       Int?     // seconds
  targetAgeMin   Int      // 대상 연령 최소 (개월)
  targetAgeMax   Int      // 대상 연령 최대 (개월)
  category       String?  // 카테고리 추가
  difficulty     Difficulty
  viewCount      Int      @default(0)
  bookmarkCount  Int      @default(0)
  isPublished    Boolean  @default(false)
  priority       Int      @default(5) // 추천 우선순위 1-10
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("videos")
}

enum VideoPlatform {
  YOUTUBE
  NAVER_TV
  KAKAO_TV
  VIMEO
  OTHER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

// 치료사 프로필
model TherapistProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  specialty       TherapyType
  licenseNumber   String?  // 자격증 번호
  experience      Int      // 경력 (년)
  education       String?  // 학력
  certifications  String?  // 자격증 (JSON)
  introduction    String?  // 자기소개
  consultationFee Int      // 상담료 (원)
  status          TherapistStatus @default(PENDING)
  approvedAt      DateTime?
  rejectedAt      DateTime?
  rejectionReason String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // 관계
  user            User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  availability    TherapistAvailability[]
  matchingRequests MatchingRequest[]
  consultations   Consultation[]

  @@map("therapist_profiles")
}

enum TherapyType {
  SPEECH_THERAPY     // 언어치료
  OCCUPATIONAL_THERAPY // 작업치료
  PHYSICAL_THERAPY   // 물리치료
  PSYCHOLOGICAL_THERAPY // 심리치료
  BEHAVIORAL_THERAPY // 행동치료
  PLAY_THERAPY      // 놀이치료
}

enum TherapistStatus {
  PENDING   // 승인 대기
  APPROVED  // 승인됨
  REJECTED  // 거절됨
  SUSPENDED // 정지됨
}

// 치료사 가능 시간
model TherapistAvailability {
  id          String   @id @default(cuid())
  therapistId String
  dayOfWeek   Int      // 0=일요일, 1=월요일, ..., 6=토요일
  startTime   String   // "09:00"
  endTime     String   // "18:00"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  // 관계
  therapist TherapistProfile @relation(fields: [therapistId], references: [id], onDelete: Cascade)

  @@map("therapist_availability")
}

// 매칭 요청
model MatchingRequest {
  id              String   @id @default(cuid())
  parentUserId    String
  childId         String
  therapistId     String
  preferredDates  String   // JSON 배열 ["2024-01-15", "2024-01-16"]
  notes           String?  // 부모 요청사항
  status          MatchingStatus @default(PENDING)
  therapistResponse String? // 치료사 응답
  consultationId  String?  // 승인된 경우 상담 ID
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // 관계
  parentUser  User              @relation(fields: [parentUserId], references: [id])
  child       Child             @relation(fields: [childId], references: [id])
  therapist   TherapistProfile  @relation(fields: [therapistId], references: [id])
  consultation Consultation?

  @@map("matching_requests")
}

enum MatchingStatus {
  PENDING   // 대기중
  APPROVED  // 승인됨
  REJECTED  // 거절됨
  CANCELLED // 취소됨
}

// 상담 예약
model Consultation {
  id              String   @id @default(cuid())
  matchingRequestId String @unique
  parentUserId    String
  childId         String
  therapistId     String
  scheduledAt     DateTime // 예약된 시간
  duration        Int      @default(50) // 상담 시간 (분)
  type            ConsultationType @default(ONLINE)
  status          ConsultationStatus @default(SCHEDULED)
  fee             Int      // 상담료
  paymentStatus   PaymentStatus @default(PENDING)
  notes           String?  // 상담 노트
  feedback        String?  // 피드백
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // 관계
  matchingRequest MatchingRequest  @relation(fields: [matchingRequestId], references: [id])
  parentUser      User            @relation(fields: [parentUserId], references: [id])
  child           Child           @relation(fields: [childId], references: [id])
  therapist       TherapistProfile @relation(fields: [therapistId], references: [id])

  @@map("consultations")
}

enum ConsultationType {
  ONLINE    // 온라인
  OFFLINE   // 오프라인
  HOME_VISIT // 방문
}

enum ConsultationStatus {
  SCHEDULED // 예약됨
  COMPLETED // 완료됨
  CANCELLED // 취소됨
  NO_SHOW   // 노쇼
}

enum PaymentStatus {
  PENDING   // 결제 대기
  PAID      // 결제 완료
  REFUNDED  // 환불 완료
  FAILED    // 결제 실패
}