// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 사용자 관리
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?  // NextAuth 사용 시 null 가능
  phone     String?  // 전화번호 추가
  role      Role     @default(PARENT)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 관계
  posts            Post[]
  comments         Comment[]
  videoComments    VideoComment[]
  children         Child[]
  accounts         Account[]
  sessions         Session[]
  therapistProfile TherapistProfile?
  matchingRequests MatchingRequest[]
  consultations    Consultation[]

  @@map("users")
}

// NextAuth.js를 위한 계정 모델
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth.js를 위한 세션 모델
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth.js를 위한 검증 토큰 모델
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// 사용자 역할
enum Role {
  PARENT     // 부모
  THERAPIST  // 치료사
  ADMIN      // 관리자
}

// 아이 정보 (기존 아키텍처에서 가져옴)
model Child {
  id               String    @id @default(cuid())
  userId           String
  name             String
  birthDate        DateTime
  gender           Gender
  gestationalWeeks Int?      // 출산 주수
  birthWeight      Float?    // 출생 시 몸무게
  currentHeight    Float?    // 현재 키
  currentWeight    Float?    // 현재 몸무게
  medicalHistory   String?   // 병력/수술력
  familyHistory    String?   // 가족력
  treatmentHistory String?   // 치료력
  notes            String?   // 특이사항
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // 관계
  user        User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  assessments DevelopmentAssessment[]
  matchingRequests MatchingRequest[]
  consultations    Consultation[]

  @@map("children")
}

enum Gender {
  MALE
  FEMALE
}

// 발달 체크 (기본 구조만 설정)
model DevelopmentAssessment {
  id           String                @id @default(cuid())
  childId      String
  ageInMonths  Int
  status       AssessmentStatus      @default(IN_PROGRESS)
  totalScore   Float                 @default(0)
  completedAt  DateTime?
  createdAt    DateTime              @default(now())

  // 관계
  child     Child                   @relation(fields: [childId], references: [id], onDelete: Cascade)
  results   AssessmentResult[]
  responses AssessmentResponse[]

  @@map("development_assessments")
}

enum AssessmentStatus {
  IN_PROGRESS
  COMPLETED
}

model AssessmentResult {
  id           String                @id @default(cuid())
  assessmentId String
  category     DevelopmentCategory
  score        Float
  level        DevelopmentLevel
  feedback     String?
  recommendations String?
  createdAt    DateTime              @default(now())

  // 관계
  assessment DevelopmentAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@map("assessment_results")
}

// 발달 체크 질문
model AssessmentQuestion {
  id          String              @id @default(cuid())
  category    DevelopmentCategory
  ageMin      Int                 // 최소 월령
  ageMax      Int                 // 최대 월령
  questionNumber Int              // 문항 번호 (1-35)
  level       QuestionLevel       // Q1, Q2, Q3
  questionText String
  answerType  AnswerType
  isWarning   Boolean             @default(false) // 경고 질문 여부
  order       Int                 // 표시 순서
  createdAt   DateTime            @default(now())

  // 관계
  responses AssessmentResponse[]

  @@map("assessment_questions")
}

enum QuestionLevel {
  Q1
  Q2
  Q3
}

enum AnswerType {
  FOUR_POINT  // 잘함, 대체로 잘함, 대체로 못함, 전혀 못함
  TWO_POINT   // 잘함, 못함
}

// 발달 체크 응답
model AssessmentResponse {
  id           String                @id @default(cuid())
  assessmentId String?               // null이면 비로그인 평가
  guestAssessmentId String?
  questionId   String
  level        QuestionLevel         // 응답한 레벨 (Q1/Q2/Q3)
  answer       String                // 응답 (잘함, 못함 등)
  score        Float                 @default(0) // 환산 점수
  createdAt    DateTime              @default(now())

  // 관계
  assessment      DevelopmentAssessment? @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  guestAssessment GuestAssessment?       @relation(fields: [guestAssessmentId], references: [id], onDelete: Cascade)
  question        AssessmentQuestion     @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("assessment_responses")
}

// 비로그인 발달 체크
model GuestAssessment {
  id           String   @id @default(cuid())
  childName    String
  birthDate    DateTime
  gender       Gender
  totalScore   Float    @default(0)
  completedAt  DateTime?
  createdAt    DateTime @default(now())

  // 관계
  responses AssessmentResponse[]

  @@map("guest_assessments")
}

enum DevelopmentCategory {
  GROSS_MOTOR   // 대근육
  FINE_MOTOR    // 소근육
  COGNITIVE     // 인지
  LANGUAGE      // 언어
  SOCIAL        // 사회성
  EMOTIONAL     // 정서
}

enum DevelopmentLevel {
  EXCELLENT          // 우수 (80-100점)
  GOOD              // 양호 (60-79점)
  CAUTION           // 주의 (40-59점)
  NEEDS_OBSERVATION // 관찰 필요 (0-39점)
}

// 게시판 시스템
model Board {
  id          String @id
  name        String
  description String?
  order       Int    @default(0)
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  posts Post[]

  @@map("boards")
}

// 게시글
model Post {
  id          String      @id @default(cuid())
  title       String
  content     String
  summary     String?     // 요약 (뉴스에서 사용)
  imageUrl    String?     // 썸네일 이미지 (뉴스에서 사용)
  category    String?     // 게시글 카테고리 (QUESTION, SHARE, REVIEW, ANNOUNCEMENT, EVENT 등)
  tags        String?     // JSON 배열로 저장 (뉴스 태그)
  views       Int         @default(0)
  isSticky    Boolean     @default(false) // 상단 고정
  isPublished Boolean     @default(true)
  publishedAt DateTime?   // 발행일 (뉴스에서 사용)
  boardId     String
  authorId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // 관계
  board    Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]

  @@map("posts")
}

// 댓글
model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  authorId  String
  parentId  String?  // 대댓글을 위한 부모 댓글 ID
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 관계
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReply", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReply")

  @@map("comments")
}

// News 모델은 Post 모델로 통합되었습니다.
// 모든 뉴스는 boardId='news'인 Post로 저장됩니다.

// 놀이영상 (기본 구조만 설정)
model Video {
  id                    String         @id @default(cuid())
  title                 String
  description           String
  videoUrl              String         // 외부 링크
  videoPlatform         VideoPlatform
  thumbnailUrl          String?
  duration              Int?           // seconds
  targetAgeMin          Int            // 대상 연령 최소 (개월)
  targetAgeMax          Int            // 대상 연령 최대 (개월)
  category              String?        // 카테고리 (레거시)
  difficulty            Difficulty
  developmentCategories String?        // JSON 배열: ["GROSS_MOTOR", "FINE_MOTOR", ...]
  recommendedForLevels  String?        // JSON 배열: ["NEEDS_ATTENTION", "CAUTION", ...]
  viewCount             Int            @default(0)
  bookmarkCount         Int            @default(0)
  isPublished           Boolean        @default(false)
  priority              Int            @default(5) // 추천 우선순위 1-10
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt

  // 관계
  comments VideoComment[]

  @@map("videos")
}

model VideoComment {
  id        String   @id @default(cuid())
  videoId   String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 관계
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("video_comments")
}

enum VideoPlatform {
  YOUTUBE
  NAVER_TV
  KAKAO_TV
  VIMEO
  OTHER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

// 치료사 프로필
model TherapistProfile {
  id              String   @id @default(cuid())
  userId          String   @unique

  // 기본 정보
  gender          Gender?
  birthYear       Int?
  address         String?
  addressDetail   String?

  // 전문 정보
  specialties     String?  // JSON 배열: ["SPEECH_THERAPY", "SENSORY_INTEGRATION"]
  childAgeRanges  String?  // JSON 배열: ["AGE_0_12", "AGE_13_24"]
  serviceAreas    String?  // JSON 배열: ["GANGNAM", "SEOCHO"]
  sessionFee      Int?     // 50분 기준 상담료 (원)

  // 기존 필드 (호환성 유지)
  specialty       TherapyType? // 레거시
  licenseNumber   String?  // 자격증 번호 (레거시)
  experience      Int?     // 경력 (년) (레거시)
  education       String?  // 학력
  introduction    String?  // 자기소개
  consultationFee Int?     // 상담료 (원) (레거시)

  // 승인 관련
  approvalStatus  ApprovalStatus @default(PENDING)
  approvedAt      DateTime?
  approvedBy      String?  // 승인한 관리자 ID
  rejectedAt      DateTime?
  rejectionReason String?
  additionalInfoRequested String? // 추가 자료 요청 내용

  // 기존 상태 (레거시)
  status          TherapistStatus @default(PENDING)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // 관계
  user            User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  availability    TherapistAvailability[]
  matchingRequests MatchingRequest[]
  consultations   Consultation[]
  certifications  Certification[]
  experiences     Experience[]
  timeSlots       TimeSlot[]              // Phase 3: 스케줄 슬롯

  @@map("therapist_profiles")
}

enum TherapyType {
  SPEECH_THERAPY        // 언어치료
  SENSORY_INTEGRATION   // 감각통합
  PLAY_THERAPY          // 놀이치료
  ART_THERAPY           // 미술치료
  MUSIC_THERAPY         // 음악치료
  OCCUPATIONAL_THERAPY  // 작업치료
  COGNITIVE_THERAPY     // 인지치료
  BEHAVIORAL_THERAPY    // 행동치료
  PHYSICAL_THERAPY      // 물리치료 (레거시)
  PSYCHOLOGICAL_THERAPY // 심리치료 (레거시)
}

enum TherapistStatus {
  PENDING   // 승인 대기
  APPROVED  // 승인됨
  REJECTED  // 거절됨
  SUSPENDED // 정지됨
}

enum ApprovalStatus {
  PENDING                    // 승인 대기
  PENDING_ADDITIONAL_INFO    // 추가 자료 요청됨
  APPROVED                   // 승인됨
  REJECTED                   // 거절됨
}

// 치료사 가능 시간
model TherapistAvailability {
  id          String   @id @default(cuid())
  therapistId String
  dayOfWeek   Int      // 0=일요일, 1=월요일, ..., 6=토요일
  startTime   String   // "09:00"
  endTime     String   // "18:00"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  // 관계
  therapist TherapistProfile @relation(fields: [therapistId], references: [id], onDelete: Cascade)

  @@map("therapist_availability")
}

// 치료사 자격증
model Certification {
  id                String   @id @default(cuid())
  therapistProfileId String
  name              String   // 자격증명
  issuingOrganization String // 발급기관
  issueDate         DateTime // 취득일
  filePath          String?  // 자격증 사본 파일 경로
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // 관계
  therapistProfile TherapistProfile @relation(fields: [therapistProfileId], references: [id], onDelete: Cascade)

  @@map("certifications")
}

// 치료사 경력
model Experience {
  id                String         @id @default(cuid())
  therapistProfileId String
  employmentType    EmploymentType // 기관 또는 프리랜서
  institutionName   String?        // 기관명 (기관인 경우)
  specialty         TherapyType    // 치료분야
  startDate         DateTime       // 시작일
  endDate           DateTime?      // 종료일 (현재 재직 중이면 null)
  description       String?        // 설명
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // 관계
  therapistProfile TherapistProfile @relation(fields: [therapistProfileId], references: [id], onDelete: Cascade)

  @@map("experiences")
}

enum EmploymentType {
  INSTITUTION  // 기관
  FREELANCER   // 프리랜서
}

// 매칭 요청
model MatchingRequest {
  id              String   @id @default(cuid())
  parentUserId    String
  childId         String
  therapistId     String
  preferredDates  String   // JSON 배열 ["2024-01-15", "2024-01-16"]
  notes           String?  // 부모 요청사항
  status          MatchingStatus @default(PENDING)
  therapistResponse String? // 치료사 응답
  consultationId  String?  // 승인된 경우 상담 ID
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // 관계
  parentUser  User              @relation(fields: [parentUserId], references: [id])
  child       Child             @relation(fields: [childId], references: [id])
  therapist   TherapistProfile  @relation(fields: [therapistId], references: [id])
  consultation Consultation?

  @@map("matching_requests")
}

enum MatchingStatus {
  PENDING   // 대기중
  APPROVED  // 승인됨
  REJECTED  // 거절됨
  CANCELLED // 취소됨
}

// 상담 예약
model Consultation {
  id              String   @id @default(cuid())
  matchingRequestId String @unique
  parentUserId    String
  childId         String
  therapistId     String
  scheduledAt     DateTime // 예약된 시간
  duration        Int      @default(50) // 상담 시간 (분)
  type            ConsultationType @default(ONLINE)
  status          ConsultationStatus @default(SCHEDULED)
  fee             Int      // 상담료
  paymentStatus   PaymentStatus @default(PENDING)
  notes           String?  // 상담 노트
  feedback        String?  // 피드백
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // 관계
  matchingRequest MatchingRequest  @relation(fields: [matchingRequestId], references: [id])
  parentUser      User            @relation(fields: [parentUserId], references: [id])
  child           Child           @relation(fields: [childId], references: [id])
  therapist       TherapistProfile @relation(fields: [therapistId], references: [id])

  @@map("consultations")
}

enum ConsultationType {
  ONLINE    // 온라인
  OFFLINE   // 오프라인
  HOME_VISIT // 방문
}

enum ConsultationStatus {
  SCHEDULED // 예약됨
  COMPLETED // 완료됨
  CANCELLED // 취소됨
  NO_SHOW   // 노쇼
}

enum PaymentStatus {
  PENDING   // 결제 대기
  PAID      // 결제 완료
  REFUNDED  // 환불 완료
  FAILED    // 결제 실패
}

// ===== Phase 3: 스케줄 관리 시스템 =====

// 예약 가능 시간 슬롯
model TimeSlot {
  id               String   @id @default(cuid())
  therapistId      String
  date             DateTime // 날짜 (YYYY-MM-DD)
  startTime        String   // "09:00"
  endTime          String   // "10:00"

  // 상태
  isAvailable      Boolean  @default(true)
  isHoliday        Boolean  @default(false)
  isBufferBlocked  Boolean  @default(false) // 버퍼 타임으로 차단됨
  blockedBy        String?  // 버퍼로 막은 예약 ID

  // 예약 관리
  currentBookings  Int      @default(0)     // 현재 예약 수

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // 관계
  therapist TherapistProfile @relation(fields: [therapistId], references: [id], onDelete: Cascade)

  @@unique([therapistId, date, startTime])
  @@index([therapistId, date, isAvailable])
  @@map("time_slots")
}

// 휴일 관리
model HolidayDate {
  id          String   @id @default(cuid())
  therapistId String?  // null이면 공휴일
  date        DateTime // 휴일 날짜
  reason      String?  // 휴일 사유
  isRecurring Boolean  @default(false) // 매년 반복 여부

  createdAt   DateTime @default(now())

  @@unique([therapistId, date])
  @@index([date])
  @@map("holiday_dates")
}